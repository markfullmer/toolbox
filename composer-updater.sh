# Functionality:
# 1. Clone the repository from Pantheon & add the Github remote
# 2. Create a new branch
# 3. Update Drupal core via Composer
# 4. Push the updates to a multidev & to the Github remote
# 5. Provide Github issue & pull request

## Prerequisites/assumptions
# 1. You are using Pantheon and have terminus installed on the machine
# 2. The Pantheon site name matches the repository name on your Github mirror.
# 3. You are using the Github CLI (https://cli.github.com/)

# -------------
source sites.sh
# sites.sh should declare an array of site machine names and issue reviewer(s),
# as well as other variables listed below.
# for multiple sites, change the above to `source $1` and pass the variables
# dynamically, e.g., `sh composer-updater.sh drupal8sites.sh`

declare -A SITES=( [mysite1]=markfullmer [mysite2]=user2,user3 )
GITHUB="git@github.com"
ORG="markfullmer"
PROJECT="My Project"
PR_ASSIGNEE="markfullmer"
TITLE="Update Drupal core"
PACKAGES="drupal/core 'drupal/core-*'
ISSUE_BODY="## Purpose
Apply latest Drupal core update

*This was generated by an automated process.*"

# -----------

for SITE in "${!SITES[@]}"
do
if [ -d $SITE ]
  then
    cd $SITE
    pwd
    git fetch && git checkout master
    git pull github master
  else
    ## Get the codebase & create a new branch
    git clone "$GITHUB":"$ORG"/"$SITE".git
    cd $SITE
    git remote rename origin github
  fi

  DATE=`date "+%m%d"`
  BRANCH="update-$DATE"
  git checkout -b $BRANCH

  # Apply the updates
  composer update $PACKAGES --with-all-dependencies
  git add . && git commit -m "$TITLE" -a

  # Push to a Pantheon multidev
  PANTHEON_SITE_GIT_URL="$(terminus connection:info $SITE.dev --field=git_url)"
  git remote add pantheon "$PANTHEON_SITE_GIT_URL"
  git push pantheon $BRANCH
  terminus multidev:create -- "$SITE".live "$BRANCH"

  # Post issue and pull request to Github
  git push github $BRANCH
  ISSUE_RESPONSE=$(gh issue create --title "$TITLE" --body "$ISSUE_BODY" --assignee "$ASSIGNEE" --project="$PROJECT")
  # Get the issue number for use in the pull request message.
  parts=(${ISSUE_RESPONSE//\// })
  ISSUE=${parts[*]: -1}
  gh pr create --assignee "$ASSIGNEE" --reviewer="${SITES[$SITE]}"--project="$PROJECT" --title "$ISSUE - $TITLE" --body "## Purpose/motivation
Fixes #$ISSUE

## Testing
Review a dry run of this update at https://$BRANCH-$SITE.pantheonsite.io"
  cd ..

  ## Run any pending database updates.
  terminus drush "$SITE"."$BRANCH" -- updb -y
done